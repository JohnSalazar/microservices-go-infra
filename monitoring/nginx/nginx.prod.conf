user nginx;

# equal nproc
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

worker_rlimit_nofile 20960;

http {    

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # Buffer size for POST submissions
    client_body_buffer_size 10k;
    client_max_body_size 10m;

    # Buffer size for Headers
    client_header_buffer_size 1k;


    # Max time to receive client headers/body
    client_body_timeout 12;
    client_header_timeout 12;

    # Max time to keep a connection open
    keepalive_timeout 65;

    # Max time fpr the client accept/receive a response
    send_timeout 10;

    # Skip buffering for static files
    sendfile on;

    # Optimise sendfile packets
    tcp_nopush on;

    access_log  /var/log/nginx/access.log;    

    upstream nats_service {
        server nats-streaming-svc:8222;
    }

    upstream prometheus_service {
        server prometheus-svc:9090;
    }

    upstream grafana_service {
        server grafana-svc:3001;
    }

    upstream cadvisor_service {
        server cadvisor-svc:8080;
    }    

    upstream mailhog_service {
        server mailhog-smtp-svc:8025;
    }

    upstream consul_service {
        server consul-svc:8500;
    }

    upstream authentication_service {
        server authentication-svc:5100;
    }
    
    upstream cart_service {
        server cart-svc:5500;
    }

    upstream customer_service {
        server customer-svc:5300;
    }

    upstream email_service {
        server email-svc:52000;
        server email-svc:53000;
    }

    upstream order_service {
        server order-svc:5600;
    }

    upstream payment_service {
        server payment-svc:5700;
    }

    upstream product_service {
        server product-svc:5400;
    }

    upstream web_service {
        server web-svc:3000;
    }

    # this is required to proxy Grafana Live WebSocket connections.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        server_name localhost;
        
        listen 80 default_server;
        return 301 https://$host$request_uri;
    }
        
    server {
        server_name localhost;

        # listen 8080 ssl http2;
        #listen 80 ssl http2;        
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        # ssl_certificate /etc/nginx/cert/localhost.crt;
        # ssl_certificate_key /etc/nginx/cert/localhost.key;
        
        ssl_certificate /certs/localhost.crt;
        ssl_certificate_key /certs/localhost.key;

        ssl_protocols TLSv1.2 TLSv1.3; 
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        
        location / {
            # proxy_pass  http://mymicroservices.com;
            proxy_set_header    Host                $http_host;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_pass https://web_service/;
        }
        
        location /stub_status {
            stub_status;
        }

        location /authentications/ {
            proxy_pass https://authentication_service/;
        }

        location /carts/ {
            proxy_pass https://cart_service/;
        }

        location /customers/ {
            proxy_pass https://customer_service/;
        }

        location /emails/ {
            proxy_pass https://email_service/;
        }

        location /orders/ {
            proxy_pass https://order_service/;
        }

        location /payments/ {
            proxy_pass https://payment_service/;
        }

        location /products/ {
            proxy_pass https://product_service/;
        }

        location /nats/ {
            proxy_pass http://nats_service/;
        }

        location /jaeger/ {
            proxy_pass http://jaeger-collector-svc:16686/jaeger/;
        }

        location /prometheus/ {
            rewrite ^/prometheus/?$ /prometheus/graph redirect;
            rewrite ^/prometheus/(.*)$ /$1 break;
            proxy_pass http://prometheus_service/;
        }

        location /grafana/ {
            proxy_set_header Host $http_host;
            proxy_pass http://grafana_service/;
        }

        # Proxy Grafana Live WebSocket connections.
        location /grafana/api/live {
            rewrite  ^/grafana/(.*)  /$1 break;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $http_host;
            proxy_pass http://grafana_service/;
        }

        location /cadvisor/ {
            proxy_pass http://cadvisor_service/;
            proxy_redirect ~^/containers/ /cadvisor/containers/;			
		    proxy_redirect ~^/docker/ /cadvisor/docker/;
        }

        location /mailhog/ {
            proxy_pass http://mailhog_service/;
        }

        location /consul/ {
            proxy_pass http://consul_service/;
        }

        client_max_body_size 20M;
        # proxy_set_header Host $http_host;
        # proxy_set_header X-Forwarded-Host $host;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_set_header    Host             $server_name;
        proxy_set_header    X-Real-IP        $remote_addr;
        proxy_set_header    X-Forwarded-Host $host;
        proxy_set_header    X-Forwarded-Server $host;
        proxy_set_header    X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto $scheme;
        proxy_set_header    X-Client-Verify  SUCCESS;
        proxy_set_header    X-Client-DN      $ssl_client_s_dn;
        proxy_set_header    X-SSL-Subject    $ssl_client_s_dn;
        proxy_set_header    X-SSL-Issuer     $ssl_client_i_dn;
        proxy_read_timeout 1800;
        proxy_connect_timeout 1800;
        chunked_transfer_encoding on;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_buffering off;
        # proxy_pass_request_headers on;        

        add_header "x-nginx-trace" "$hostname-$server_port";
        add_header "server_name" "$server_name";
    }    
}

events {
    # for worker_connections ulimit -n, worker_processes x worker_connections = max connections
    worker_connections 1024;
    multi_accept on;
    use epoll;
    epoll_events 512;
}